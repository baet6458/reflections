What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository it creates a workspace locally
	to start tracking files
	and allows you to see what files have been committed. We need it to 
	track files and see which ones are commited

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory and repository
	because it doesn't submit it to the repository but its already out of
	the working directory so if you make any changes in the working directory
	it won't change the one in the staging area. It allows you to have 
	different versions of the same document for branching.

How can you use the staging area to make sure you have one commit per logical
change?

	You can view the difference in the staging area vs the working directory
	to make sure that the change is big enough for a commit	

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	When expiermenting with things, editing graphics, making a differnt version.
	You could keep a working version of the program without having to worry about
	compleely breaking the program
	
How do the diagrams help you visualize the branch structure?

	it helps visualize how branches connect to each other and what I can do to
	reach certain commits and how they work

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	We have one branch now with the revisions from both sources.
	we represent it that way so we can show that both branches merge into a singular
	spot and all of the history behind them

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
		
	Pros: it makes merging alot of code very quick and efficient if they have no conflicts
	cons: it makes it hard to handle conflicts before attempting to merge and therefore
		you have to make changes
